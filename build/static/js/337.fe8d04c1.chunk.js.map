{"version":3,"file":"static/js/337.fe8d04c1.chunk.js","mappings":"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","sources":["page/Project/Project.tsx","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport AppLayout from '../../common/AppLayout';\nimport { projects } from '../../module/projects';\nimport { RootState } from '../../redux/configureStore';\nimport {\n  backAction,\n  projectDetail,\n} from '../../redux/reducer/pages/projectSlice';\nimport styles from '../../styles/page/Project.module.scss';\nimport ProjectDetail from './ProjectDetail';\nimport { useInView } from 'react-intersection-observer';\nimport {\n  changeMenuName,\n  changeSubMenuName,\n} from '../../redux/reducer/common/categorySlice';\nimport { Link } from 'react-router-dom';\nconst Project = () => {\n  const dispatch = useDispatch();\n  const [ref, inView] = useInView();\n  const { currentSubMenuName } = useSelector(\n    (state: RootState) => state.category\n  );\n  useEffect(() => {\n    if (inView) {\n      dispatch(changeMenuName('Project'));\n      dispatch(changeSubMenuName('프로젝트 소개'));\n      dispatch(backAction(false));\n    }\n  }, [inView]);\n\n  // const projectPage = (num: number, e: React.MouseEvent<HTMLLIElement>) => {\n  //   dispatch(projectDetail(num));\n\n  // };\n  const projectsList = (): JSX.Element[] => {\n    let projectsArr: JSX.Element[] = [];\n    projects.map((v) =>\n      projectsArr.push(\n        <Link to={`/project/${v.num}`}>\n          <li>\n            <div className={styles.projectInfo}>\n              <div className={styles.title}>{v.language.label}</div>\n              <div className={styles.skill}>\n                {v.language.description.split('/').map((v) => (\n                  <p>{v}</p>\n                ))}\n              </div>\n              <hr />\n              <div className={styles.title}>{v.tool.label}</div>\n              <div className={styles.skill}>\n                {v.tool.description.split('/').map((v) => (\n                  <p>{v}</p>\n                ))}\n              </div>\n              <hr />\n              <div className={styles.title}>{v.skills.label}</div>\n              <div className={styles.skill}>\n                {v.skills.description.split('/').map((v) => (\n                  <p>{v}</p>\n                ))}\n              </div>\n            </div>\n            <div className={styles.img}>\n              <img src={v.mainImgSrc.description} />\n            </div>\n            <p className={styles.name}>{v.name.description}</p>\n            <p className={styles.launch}>{v.date.description}</p>\n            <p className={styles.launch}>{v.launch.description}</p>\n          </li>\n        </Link>\n      )\n    );\n    return projectsArr;\n  };\n\n  return (\n    <div className={styles.container}>\n      <ul className={styles.projectsListWrap} ref={ref}>\n        {projectsList()}\n      </ul>\n    </div>\n  );\n};\n\nexport default Project;\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const unobserve = React.useRef<Function>();\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n  });\n  // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n  callback.current = onChange;\n\n  const setRef = React.useCallback(\n    (node: Element | null) => {\n      if (unobserve.current !== undefined) {\n        unobserve.current();\n        unobserve.current = undefined;\n      }\n\n      // Skip creating the observer\n      if (skip) return;\n\n      if (node) {\n        unobserve.current = observe(\n          node,\n          (inView, entry) => {\n            setState({ inView, entry });\n            if (callback.current) callback.current(inView, entry);\n\n            if (entry.isIntersecting && triggerOnce && unobserve.current) {\n              // If it should only trigger once, unobserve the element after it's inView\n              unobserve.current();\n              unobserve.current = undefined;\n            }\n          },\n          {\n            root,\n            rootMargin,\n            threshold,\n            // @ts-ignore\n            trackVisibility,\n            // @ts-ignore\n            delay,\n          },\n          fallbackInView,\n        );\n      }\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  /* eslint-disable-next-line */\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n      });\n    }\n  });\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["dispatch","useDispatch","useInView","ref","inView","useSelector","state","category","currentSubMenuName","useEffect","changeMenuName","changeSubMenuName","backAction","className","styles","projectsArr","projects","v","push","to","num","language","label","description","split","map","tool","skills","src","mainImgSrc","name","date","launch","projectsList","_typeof","obj","Symbol","iterator","constructor","prototype","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","bind","__proto__","_possibleConstructorReturn","self","call","TypeError","assertThisInitialized","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","e","result","Super","NewTarget","this","arguments","apply","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","optionsToId","options","keys","sort","filter","root","has","set","toString","get","createObserver","id","instance","thresholds","elements","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","splice","indexOf","delete","unobserve","size","disconnect","isPlainChildren","children","React","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setState","current","setRef","node"],"sourceRoot":""}